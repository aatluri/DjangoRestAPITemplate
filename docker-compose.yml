# version of the docker compose syntax that we are using .
# This is just in case Docker compose, release new versions of the syntax.
# it's a version mechanism to make sure that the syntax we use here matches the specific version.
# if they were to release new versions, it wouldn't break out configuration.
# When you use this command, you might get a warning version is obsolete. Technically you dont need to specify the version as  it wonâ€™t be used.
# The docker compose v2 (=the cli plugin) will always use the latest version of the compose file schema.
# version: "3.9"

# Dockercompose defines how Docker images should be used to run out development server.
# We define the images as different services.
# Each service has the following:
# name : the name of the service
# port mappings: You can define various port mappings which make ports accessible on your local machine, and this is how we're going to actually connect to the containers that are running our application
# volume mappings: Volume mappings is important because it's how the code in our project gets into the Docker container.

# This is the main block inside the Docker compose file. It consists of one more services needed by our application




services:
# app is the name of the service we are creating for our application
  app:
# We have build context and the current directory. What this does is it says we want to build the Docker file inside our current directory.
# The . means current directory
    build:
      context: .
# We then set an argument DEV=TRUE. This will be used in the Docker File during build.
      args:
        - DEV=true
# Then we have the port mappings. So this maps port 8000 on our local machine to port 8000 inside our Docker container.
# This is how we can access the network when we want to connect to our server.
    ports:
      - "8000:8000"
# Next we have volumes, volumes odd way of mapping directories from our system into the Docker container.
# So we're mapping the app directory that we created in the project to Ford's hash app inside our container.
# The reason we add this is because we want the updates that we make to our code in our local project to be reflected in the running container in real time.
# So we don't want to have to rebuild the container.
# Every time we change a line of code, we want to automatically sync the code in our project to the cloud running in the container.
    volumes:
      - ./app:/app
      - dev-static-data:/vol/web
# Finally we have the commands that we want to run
# First we run the wait for db command
# Then we run the migrate command
# Then we have the command that is used to run the service.
# We can override this command when we run Docker compose run.
# However, by default, if we don't specify a command, it's going to use the command we define inside our Docker compose file.
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"

# Tells the app service how to connect to the db service
# These environment variables are used in the django settings.py file in the database section.
    environment:
      - DB_HOST=db
      - DB_NAME=devdb
      - DB_USER=devuser
      - DB_PASS=changeme
      - DEBUG=1
# Tells Docker compose that the app service depends on the db service. it will wait for the db service to start.
    depends_on:
      - db
# create a service called db
# This is the image we are going to be using from Docker Hub. You can find more images at https://hub.docker.com/_/postgres
# This is the vilume we created below and the path is where the data is persisted.
  db:
    image: postgres:13-alpine
    volumes:
      - dev-db-data:/var/lib/postgresql/data
# We set these environments variables to set the initial database configuration of the db service
# So when our database first starts, it's going to create a database and a named database inside Postgres called Dev DB.
# And then it's going to create a user called dev user and it's going to set the positive that use it to change me.
    environment:
      - POSTGRES_DB=devdb
      - POSTGRES_USER=devuser
      - POSTGRES_PASSWORD=changeme

# this is the name of the volume . We dont need to anything else here as Docker Compose will take care of it.
# The indentation for this matches that of services.
volumes:
  dev-db-data:
  dev-static-data:

# Run docker-compose build to build the docker container. So it effectively does the same as Docker build.
# Run docker-compose up to run the development server.
# Run docker-compose down to clear any existing containers.
# Run docker-compose run --rm app sh -c "python manage.py test" to run tests
# Run docker-compose run --rm app sh -c "python manage.py wait_for_db" to run a command directly
# Run docker-compose run --rm app sh -c "python manage.py makemigrations" to create the autogenerated migrations file
# Run docker-compose run --rm app sh -c "python manage.py wait_for_db && python manage.py migrate" to migrate
# Run docker volume ls to list any volumes
# Run docker volume rm "name of volume" to remove the volume
# Run docker-compose run --rm app sh -c "flake8 --max-line-length 120" to run linting.
# Run docker-compose run --rm app sh -c "python manage.py startapp user" to create a Django app within our project
# http://127.0.0.1:8000/admin/login/?next=/admin/ to access the admin page
# Superuser: admin@example.com , password=12345
# However it does it via the Docker file, so it builds and tags the images appropriately for running our Docker compose configuration.

# If you use docker-compose-deploy to deploy the application.
# docker-compose -f docker-compose-deploy.yml down to clear any running containers.
# docker-compose -f docker-compose-deploy.yml up to run the application
# Run docker-compose -f docker-compose-deploy.yml run --rm app sh -c "python manage.py createsuperuser" to create a super user